name: '[Batch Server] Production Deploy'

on:
  push:
    branches:
      - master
    paths:
      - apps/batch-server/**
      - prisma/schema.prisma
      - libs/**
      - .github/workflows/batch-server.prod.deploy.yml
      - '!apps/batch-server/test/**'
      - '!apps/batch-server/README.md'


jobs:
    build:
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: Set up Docker Build
          uses: docker/setup-buildx-action@v1
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.USER_SERVER_PROD_DEPLOY_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.USER_SERVER_PROD_DEPLOY_AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.USER_SERVER_PROD_DEPLOY_AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REGISTRY }}
            ECR_REPOSITORY: ${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REPOSITORY }}
            IMAGE_TAG: latest
          run: |
            docker build -f apps/batch-server/Dockerfile -t batch-server .
            docker tag batch-server:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
    deploy:
      runs-on: ubuntu-latest
      needs: build 
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Install sshpass 
          run: sudo apt-get update && sudo apt-get install -y sshpass
  
        - name: Deploy to home server
          env:
            HOST: ${{ secrets.COMMON_HOME_SERVER_HOST }}
            PW: ${{ secrets.COMMON_HOME_SERVER_PW }}
            USER: ${{ secrets.COMMON_HOME_SERVER_USER }}
          run: |
            sshpass -p "$PW" ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
              aws ecr get-login-password --region ${{ secrets.USER_SERVER_PROD_DEPLOY_AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.COMMON_AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.USER_SERVER_PROD_DEPLOY_AWS_REGION }}.amazonaws.com
              docker pull ${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REGISTRY }}/${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REPOSITORY }}:latest
              docker stop ${{ secrets.BATCH_SERVER_PROD_DEPLOY_CONTAINER_NAME }} || true
              docker rm ${{ secrets.BATCH_SERVER_PROD_DEPLOY_CONTAINER_NAME }} || true
              
              docker run -d -p 5002:3000 --name ${{ secrets.BATCH_SERVER_PROD_DEPLOY_CONTAINER_NAME }} --network liket-net --env-file ${{ secrets.BATCH_SERVER_PROD_DEPLOY_ENV_PATH }} ${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REGISTRY }}/${{ secrets.BATCH_SERVER_PROD_DEPLOY_ECR_REPOSITORY }}:latest
            EOF
  